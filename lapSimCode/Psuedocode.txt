To get a continuous track, we draw some curve (google maps?)


To discretize the track, we find the length, break it up into segments a fixed deltaX apart. 
Then, we list the radius of curvature at each x point, given by R; positive if the car must turn right, negative if it must turn left


Finding critical points:

Currently, we find apexes just using the centripetal acceleration formula for pure circular arcs; 
Apexes should be local maxima of absolute curvature 
https://www.youtube.com/watch?v=xNiNHr3BFzg&list=PLQiPsAzoaLqUtdVImOM4WjzoYrNUy7fve&index=6 
^This is the proper way to do this; first do a maximum speed trace at each curvature point 



Todo: redo previous lapPlot. For now, assume it works and outputs array of radii as we need it

Steady-state LTS algorithm:
1. Find apex points and speed values
    Local minima of abs(radius) // use inf for straights
2. Accelerate from the minima, going forward in time
3. Decelerate from minima, going backward in time
4. Braking points are at the intersections of these two curves
    The velocity solution should be the minimum of all solutions

At the local minima of curvature, velocity will be determined by:
a = v^2 / R -> v = sqrt(R*a)

How to get acceleration a?

Dyanmics: we get GGV plot (for now, GG)

The GG plot will tell us the maximum lateral acceleration at which we can maintain traction


Make a velocity array the same size as the meshed radius array
Once we solve for velocity minima, copy that array (one for accel, one for decel; the cornering velocities should be the same)

Acceleration:
v_i+1 = sqrt(vi^2 + 2*dxi * axi) // dxi is the distance step traveled (dt*vi), axi is the longitudinal acceleration maximum at current velocity
dxi will be our mesh size distance (say 5 meters)


Continue accelerating until we reach turn 1 again

Do the same for turn 2

What acceleration do we use?
If we are in a combined situation (not complete circular or not complete straight), 
we need to determine what lateral acceleration is needed to maintain traction, then use a friction circle (ellipse) to
find how much more the vehicle can accelerate longitudinally

Deceleration:
v_i-1 = sqrt(vi^2 - 2axi*dxi)

Like accel; find the minimum velocities for each apex, then decel backwards from each apex until you get back to the other side of the turn

Final speed curve:
Final vi will be the minimum value of all the previous cases



lapPlot
1. Digitize and mesh track
2. Locate apexes